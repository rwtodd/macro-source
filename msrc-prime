#!/usr/bin/env lua

-- ######################################################################
-- MSRC-PRIME -- just enough of an implementation to run against 
-- macsrc.msrc and bootstrap.  The full macsrc is written such that it
-- only uses facilities provided by msrc-prime.
-- 
-- LIMITATIONS of msrc-prime:
-- - Only one fragment call per line.
-- - No code fragments, only replacement texts
-- - No error checking
-- - No way to change the PREFIX
-- - No checks for recursion going out of control
-- - No indentention information available
-- - No global varaible hash for code to share data.
-- - No arguments passed to fragments 
-- - Can't add to an existing fragment definition
-- ... these will all be address in the full macsrc
-- ######################################################################
local prefix         = '@%.'
local def_start      = '^%s*' .. prefix .. '%s*/%s*(.-)%s*/%s*$'
local def_end        = '^%s*' .. prefix .. '%s*$'
local def_use        = '^%s*' .. prefix .. '%s*%(%s*(.-)%s*%)%s*$'
local line_stack     = { first = 1, last = 0 }
local code_fragments = { }

-- The two states parsing can be in are: "parse_line_state" and "search_state".
-- These are both functions that parse lines and return which state should be next.
function search_state(l)  
	return l:match('^%s*$') and search_state or parse_line_state(l)
end

function parse_line_state(l)
	local name = l:match(def_start)
	if name then
	    local fragment, cur = {}, assert(io.read('l'),name)
		while not cur:match(def_end) do
			fragment[#fragment + 1], cur = cur, assert(io.read('l'),name)
		end
		code_fragments[name] = fragment
		return search_state
	else
		line_stack.last             = line_stack.last + 1
		line_stack[line_stack.last] = l
		return parse_line_state
	end
end

-- input phase
local cur_state = search_state
while true do
	local line = io.read('l')
	if line == nil then break end
	cur_state = cur_state(line)
end

-- output phase
while line_stack.first <= line_stack.last do
	local l = line_stack[line_stack.first]
	line_stack.first = line_stack.first + 1
	local name = l:match(def_use)
	if name then
		local frag = assert(code_fragments[name], name)
		local flen = #frag
		line_stack.first = line_stack.first - flen 
		table.move(frag, 1, flen, line_stack.first, line_stack)
	else
		print(l)
	end
end

-- vim: filetype=lua:tabstop=4:tw=0:noet:
